name: External Dependency Test

on:
  workflow_dispatch:
    inputs:
      triggering_repo:
        description: 'Repository that triggered this test'
        required: true
        type: string
      triggering_pr:
        description: 'PR number from triggering repository'
        required: true
        type: string
      preview_url:
        description: 'Preview package URL'
        required: true
        type: string
      package_name:
        description: 'Package name being tested'
        required: true
        type: string
      triggering_sha:
        description: 'SHA from triggering repository'
        required: true
        type: string
      triggering_ref:
        description: 'Git ref from triggering repository'
        required: true
        type: string

env:
  NODE_VERSION: '20'

jobs:
  test-with-preview-dependency:
    name: Test supabase-js with preview dependency
    runs-on: ubuntu-latest
    steps:
      - name: Checkout supabase-js
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies and build supabase-js
        run: |
          npm ci
          npm run build

      - name: Install preview dependency
        run: |
          # Install the preview package
          PREVIEW_PACKAGE="${{ inputs.preview_url }}"
          echo "Installing preview package: $PREVIEW_PACKAGE"
          npm install "$PREVIEW_PACKAGE" --no-save

      - name: Run Type Check
        id: type-check
        continue-on-error: true
        run: |
          if npm run test:types; then
            echo "result=success" >> $GITHUB_OUTPUT
          else
            echo "result=failure" >> $GITHUB_OUTPUT
          fi

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase
        run: supabase start

      - name: Install jq for JSON parsing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Run Unit Tests
        id: unit-tests
        continue-on-error: true
        run: |
          if npm run test:coverage; then
            echo "result=success" >> $GITHUB_OUTPUT
          else
            echo "result=failure" >> $GITHUB_OUTPUT
          fi

      - name: Run Integration Tests
        id: integration-tests
        continue-on-error: true
        run: |
          export SUPABASE_SERVICE_ROLE_KEY="$(supabase status --output json | jq -r '.SERVICE_ROLE_KEY')"
          if npm run test:integration; then
            echo "result=success" >> $GITHUB_OUTPUT
          else
            echo "result=failure" >> $GITHUB_OUTPUT
          fi

      - name: Generate GitHub App token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.CROSS_REPO_APP_ID }}
          private-key: ${{ secrets.CROSS_REPO_APP_PRIVATE_KEY }}
          owner: supabase
          # Generate token specifically for the repo we need to comment on
          repositories: ${{ inputs.triggering_repo }}

      - name: Debug token permissions
        run: |
          echo "Token generated successfully"
          echo "App ID: ${{ vars.CROSS_REPO_APP_ID }}"
          echo "Target repositories: realtime-js,supabase-js"
          echo "Attempting to comment on: supabase/realtime-js#${{ inputs.triggering_pr }}"

      - name: Stop Supabase
        if: always()
        run: supabase stop

      - name: Find existing test results comment
        if: always() && inputs.triggering_pr != 'push'
        uses: peter-evans/find-comment@v3
        id: find-comment
        with:
          repository: supabase/${{ inputs.triggering_repo }}
          issue-number: ${{ inputs.triggering_pr }}
          comment-author: 'github-actions[bot]'
          body-includes: '<!-- supabase-js-test-results -->'
          token: ${{ steps.generate-token.outputs.token }}

      - name: Prepare test results body
        if: always()
        id: prepare-body
        run: |
          TYPE_CHECK="${{ steps.type-check.outputs.result }}"
          UNIT_TEST="${{ steps.unit-tests.outputs.result }}"
          INTEGRATION_TEST="${{ steps.integration-tests.outputs.result }}"

          TYPE_CHECK=${TYPE_CHECK:-failure}
          UNIT_TEST=${UNIT_TEST:-failure}
          INTEGRATION_TEST=${INTEGRATION_TEST:-failure}

          if [[ "$TYPE_CHECK" == "success" && "$UNIT_TEST" == "success" && "$INTEGRATION_TEST" == "success" ]]; then
            STATUS_ICON="‚úÖ"
            OVERALL_STATUS="PASSED"
            STATUS_MESSAGE="üéâ All tests passed! This preview release is compatible with supabase-js."
          else
            STATUS_ICON="‚ùå"
            OVERALL_STATUS="FAILED"
            STATUS_MESSAGE="‚ö†Ô∏è Some tests failed. Please review the failing tests before merging."
          fi

          TYPE_CHECK_DISPLAY=$([ "$TYPE_CHECK" == "success" ] && echo "‚úÖ PASSED" || echo "‚ùå FAILED")
          UNIT_TEST_DISPLAY=$([ "$UNIT_TEST" == "success" ] && echo "‚úÖ PASSED" || echo "‚ùå FAILED")
          INTEGRATION_TEST_DISPLAY=$([ "$INTEGRATION_TEST" == "success" ] && echo "‚úÖ PASSED" || echo "‚ùå FAILED")

          cat << EOF > comment-body.md
          <!-- supabase-js-test-results -->
          ## ${STATUS_ICON} supabase-js CI Test Results

          **Overall Status: ${OVERALL_STATUS}**

          Tests triggered by preview release of \`${{ inputs.package_name }}\`

          | Test Suite | Result |
          |------------|--------|
          | Type Check | ${TYPE_CHECK_DISPLAY} |
          | Unit Tests | ${UNIT_TEST_DISPLAY} |
          | Integration Tests | ${INTEGRATION_TEST_DISPLAY} |

          **Preview Package:** \`${{ inputs.preview_url }}\`
          **Commit:** [\`${{ inputs.triggering_sha }}\`](https://github.com/supabase/${{ inputs.triggering_repo }}/commit/${{ inputs.triggering_sha }})

          ${STATUS_MESSAGE}

          <details>
          <summary>View workflow run</summary>

          [View full test results](https://github.com/supabase/supabase-js/actions/runs/${{ github.run_id }})
          </details>

          ---
          <sub>Last updated: $(date -u +"%Y-%m-%dT%H:%M:%SZ")</sub>
          EOF

      - name: Report results to triggering PR
        if: always() && inputs.triggering_pr != 'push'
        uses: peter-evans/create-or-update-comment@v4
        with:
          repository: supabase/${{ inputs.triggering_repo }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ inputs.triggering_pr }}
          body-path: comment-body.md
          edit-mode: replace
          token: ${{ steps.generate-token.outputs.token }}
